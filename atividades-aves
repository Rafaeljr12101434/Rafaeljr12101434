import matplotlib.pyplot as plt
import numpy as np
import imageio
import os

# Simulation parameters
v0 = 1.5  # velocity
eta = 1.5  # random fluctuation in angle (in radians)
L = 5  # size of box
R = 1.6  # interaction radius
dt = 0.3  # time step
Nt = 200  # number of time steps
N = 100  # number of birds
plotRealTime = True # realtime plot
images_path = [] # images path name
image = [] # transform images to imageio representation
git_name = 'avespassaro.gif' # name of gif

# Initialize
np.random.seed(30)  # set the random number generator seed

# bird positions
x = np.random.rand(N, 1) * L
y = np.random.rand(N, 1) * L

# bird velocities
theta = 2 * np.pi * np.random.rand(N, 1)
vx = v0 * np.cos(theta)
vy = v0 * np.sin(theta)

# Prep figure
fig = plt.figure(figsize=(6, 6), dpi=96)
ax = plt.gca()

# Simulation Main Loop
for i in range(Nt):

    # move
    x += vx * dt
    y += vy * dt

    # apply periodic BCs
    x = x % L
    y = y % L

    # find mean angle of neighbors within R
    mean_theta = theta
    for b in range(N):
        neighbors = (x - x[b]) ** 2 + (y - y[b]) ** 2 < R ** 2
        sx = np.sum(np.cos(theta[neighbors]))
        sy = np.sum(np.sin(theta[neighbors]))
        mean_theta[b] = np.arctan2(sy, sx)

    # add random perturbations
    theta = mean_theta + eta * (np.random.rand(N, 1) - 0.5)

    # update velocities
    vx = v0 * np.cos(theta)
    vy = v0 * np.sin(theta)

    # plot in real time
    if plotRealTime or (i == Nt - 1):
        plt.cla()
        plt.quiver(x, y, vx, vy, color='r')
        plt.savefig(f'image{i}.png')
        plt.close()
        images_path.append(f'image{i}.png')
        ax.set(xlim=(0, L), ylim=(0, L))
        ax.set_aspect('equal')
        plt.pause(0.001)

# Save figure
 #plt.savefig('activematter.png',dpi=240)
 #plt.show()
 
 for filename in images_path:
 image.append(imageio.imread(filename))
 
 if not os.path.exists('temp'):
  os.system('mkdir temp')
else:
  os.system('rm temp/avespassaro.gif')
  
  imageio.mimwrite('temp/avespassaro.gif', image, fps=20)
  
  for filename in images_path:
  os.system(f'rm {filename}')
   
 images_path.clear()
image.clear()
